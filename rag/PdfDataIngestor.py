import os
from dotenv import load_dotenv
from langchain_openai import AzureOpenAIEmbeddings
from langchain.vectorstores.azuresearch import AzureSearch
from rag.PdfDataExtractor import PDFExtractor  # Custom class to handle PDF extraction
from azure.storage.blob import BlobServiceClient
import tempfile

class DataIngestor:
    """
    A class to handle the ingestion of PDF data into Azure Cognitive Search using embeddings generated by Azure OpenAI.

    This class is responsible for:
    - Loading environment variables from a `.env` file.
    - Connecting to Azure Blob Storage to download PDF files.
    - Extracting content from the PDF.
    - Using Azure OpenAI to generate embeddings for the content.
    - Ingesting the embeddings into an Azure Search Index.
    """
    
    def __init__(self):
        """
        Initializes the DataIngestor object by loading environment variables and setting up Azure
        OpenAI and Azure Search clients.

        It expects the following environment variables to be present:
        - AZURE_SEARCH_ENDPOINT: The endpoint for the Azure Cognitive Search.
        - AZURE_SEARCH_KEY: The access key for the Azure Cognitive Search.
        - AZURE_SEARCH_INDEX: The name of the index where the documents will be stored.
        - AZURE_OPENAI_EMBEDDING_ENDPOINT: The Azure OpenAI API endpoint.
        - AZURE_OPENAI_EMBEDDING_KEY: The API key for Azure OpenAI service.
        - AZURE_OPENAI_EMBEDDING_DEPLOYMENT: The name of the embedding deployment in Azure OpenAI.
        - AZURE_OPENAI_EMBEDDING_VERSION: The API version for the Azure OpenAI embedding service.
        - AZURE_STORAGE_CONNECTION: The connection string for Azure Blob Storage.
        - AZURE_BLOB_CONTAINER: The name of the container in Azure Blob Storage that contains the PDF files.
        """
        # Load environment variables from a .env file
        load_dotenv(dotenv_path='../.env')

        # Load Azure Search and OpenAI configuration
        self.endpoint = os.environ["AZURE_SEARCH_ENDPOINT"]
        self.key_credential = os.environ["AZURE_SEARCH_KEY"] 
        self.index_name = os.environ["AZURE_SEARCH_INDEX"]
        self.azure_openai_endpoint = os.environ["AZURE_OPENAI_EMBEDDING_ENDPOINT"]
        self.azure_openai_key = os.environ["AZURE_OPENAI_EMBEDDING_KEY"]
        self.azure_openai_embedding_deployment = os.environ["AZURE_OPENAI_EMBEDDING_DEPLOYMENT"]
        self.azure_openai_api_version = os.environ["AZURE_OPENAI_EMBEDDING_VERSION"]

        # Azure Blob Storage connection settings
        self.azure_storage_connection_string = os.environ.get("AZURE_STORAGE_CONNECTION")
        self.blob_container_name = os.environ.get("AZURE_BLOB_CONTAINER")
        
        print("Blob container name:", self.blob_container_name)  # Debugging

        # Initialize Azure OpenAI Embeddings
        self.embeddings = AzureOpenAIEmbeddings(
            azure_deployment=self.azure_openai_embedding_deployment,
            openai_api_version=self.azure_openai_api_version,
            azure_endpoint=self.azure_openai_endpoint,
            api_key=self.azure_openai_key
        )

        # Initialize Azure Search client
        self.vector_store = AzureSearch(
            azure_search_endpoint=self.endpoint,
            azure_search_key=self.key_credential,
            index_name=self.index_name,
            embedding_function=self.embeddings.embed_query,
            semantic_configuration_name="default"
        )

    def ingest_data(self, blob_name):
        """
        Ingests the content of a PDF stored in Azure Blob Storage into Azure Cognitive Search.

        This function:
        - Downloads the PDF from Azure Blob Storage.
        - Extracts the content using the PDFExtractor class.
        - Sends the content to Azure OpenAI to generate embeddings.
        - Ingests the resulting embeddings into Azure Search.

        Parameters:
        ----------
        blob_name : str
            The name of the PDF file stored in Azure Blob Storage to be processed and ingested.

        Returns:
        -------
        dict
            The results of the ingestion process returned by Azure Search.
        """
        # Initialize the BlobServiceClient to connect to Azure Blob Storage
        blob_service_client = BlobServiceClient.from_connection_string(self.azure_storage_connection_string)
        blob_client = blob_service_client.get_blob_client(container=self.blob_container_name, blob=blob_name)

        # Download the blob content to memory
        download_stream = blob_client.download_blob()
        file_content = download_stream.readall()  # Read the entire PDF content into memory

        # Create a temporary file to store the downloaded PDF content
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as temp_pdf:
            temp_pdf.write(file_content)  # Write the PDF content to a temporary file
            temp_pdf_path = temp_pdf.name  # Store the path to the temporary file

        # Use the PDFExtractor to extract the text content from the PDF file
        extractor = PDFExtractor(temp_pdf_path)
        file_chunks = extractor.extract_content()  # Extract content and split it into chunks

        # Remove the temporary file after content extraction
        os.remove(temp_pdf_path)

        try:
            # Ingest the extracted content into Azure Search using the vector store
            results = self.vector_store.add_documents(documents=file_chunks)
            return results  # Return the results of the ingestion process
        except Exception as e:
            # Handle any errors that occur during the ingestion process
            print(f"Data ingestion failed: {e}")
            return None


# Example usage (commented out):
# Uncomment this section if you want to run this script directly.
# if __name__ == "__main__":
#     # Initialize the DataIngestor
#     data_ingestor = DataIngestor()
#     
#     # Specify the name of the blob (PDF) to be ingested
#     blob_name = "AppleCare_ara_NA_en_v3.0.pdf"
#     
#     try:
#         # Start the ingestion process
#         result = data_ingestor.ingest_data(blob_name)
#         print("Ingestion result:", result)
#     except Exception as e:
#         print(f"An error occurred: {e}")
